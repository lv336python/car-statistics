{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.guard.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/confirm-email/confirm-email.component.css","webpack:///./src/app/confirm-email/confirm-email.component.html","webpack:///./src/app/confirm-email/confirm-email.component.ts","webpack:///./src/app/confirm-reset/confirm-reset.component.css","webpack:///./src/app/confirm-reset/confirm-reset.component.html","webpack:///./src/app/confirm-reset/confirm-reset.component.ts","webpack:///./src/app/directives/text-format.directive.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/logout/logout.component.css","webpack:///./src/app/logout/logout.component.html","webpack:///./src/app/logout/logout.component.ts","webpack:///./src/app/models/user.ts","webpack:///./src/app/notfound/notfound.component.css","webpack:///./src/app/notfound/notfound.component.html","webpack:///./src/app/notfound/notfound.component.ts","webpack:///./src/app/registration/registration.component.css","webpack:///./src/app/registration/registration.component.html","webpack:///./src/app/registration/registration.component.ts","webpack:///./src/app/reset-password/reset-password.component.css","webpack:///./src/app/reset-password/reset-password.component.html","webpack:///./src/app/reset-password/reset-password.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {HomeComponent} from \"./home/home.component\";\nimport {NotfoundComponent} from \"./notfound/notfound.component\";\nimport {RegistrationComponent} from \"./registration/registration.component\";\nimport {AuthGuard} from \"./auth.guard\";\nimport {ConfirmEmailComponent} from \"./confirm-email/confirm-email.component\";\nimport {LoginComponent} from \"./login/login.component\";\nimport {LogoutComponent} from \"./logout/logout.component\"\nimport {ResetPasswordComponent} from \"./reset-password/reset-password.component\"\nimport {ConfirmResetComponent} from \"./confirm-reset/confirm-reset.component\"\n\nconst routes: Routes = [\n    {path: '', component: HomeComponent},\n    {path: 'register', component: RegistrationComponent, canActivate: [AuthGuard]},\n    {path: 'confirm/:token', component: ConfirmEmailComponent},\n    {path: 'login', component: LoginComponent},\n    {path: 'logout', component: LogoutComponent},\n    {path: 'reset', component: ResetPasswordComponent},\n    {path: 'reset_password_confirm/:token', component: ConfirmResetComponent},\n    {path: '**', component: NotfoundComponent},\n];\n\n@NgModule({\n    exports: [RouterModule],\n    imports: [RouterModule.forRoot(routes)],\n})\nexport class AppRoutingModule {\n}\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { NotfoundComponent } from './notfound/notfound.component';\nimport { HomeComponent } from './home/home.component';\nimport { ConfirmEmailComponent } from './confirm-email/confirm-email.component';\nimport { LoginComponent } from './login/login.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { LogoutComponent } from './logout/logout.component';\nimport { ConfirmResetComponent } from './confirm-reset/confirm-reset.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RegistrationComponent,\n    NotfoundComponent,\n    HomeComponent,\n    ConfirmEmailComponent,\n    LoginComponent,\n    LogoutComponent,\n    ResetPasswordComponent,\n    ConfirmResetComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n      ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {User} from \"./models/user\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    login_api_url = \"api/login\";\n    register_api_url = \"api/register\";\n    confirm_url = \"api/confirm/\";\n    logout_api_url = \"api/logout\";\n    reset_password_url = \"api/reset\";\n    reset_password_confirm_api = \"api/password_reset\";\n\n    constructor(\n        private _http: HttpClient,\n    ) {\n    }\n\n    toRegister(user: User): Observable<any> {\n        return this._http.post<any>(this.register_api_url, user)\n            .pipe(\n                tap(\n                    data => console.log(data),\n                    error => console.log(error)\n                )\n            );\n    }\n\n    toLogin(user: User): Observable<any> {\n        return this._http.post<any>(this.login_api_url, user);\n    }\n\n    toLogout(user: User): Observable<any> {\n        return this._http.post<any>(this.logout_api_url, user);\n    }\n\n    toResetPassword(email: string): Observable<any> {\n\n        return this._http.post<any>(this.reset_password_url, {'email': email})\n    }\n\n    toResetPasswordConfirm(token, password: string): Observable<any> {\n        console.log(\"asfasfasf\");\n        return this._http.put<any>(this.reset_password_confirm_api+'/'+token, {'password': password})\n    }\n\n    confirmEmail(token: string): Observable<any> {\n\n        return this._http.get<any>(this.confirm_url + token);\n    }\n\n}\n","module.exports = \"\"","module.exports = \"  You have confirmed registration. Proceed to <a routerLink=\\\"\\\">home page</a>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from \"../auth.service\";\nimport {ActivatedRoute} from \"@angular/router\";\n\n\n@Component({\n  selector: 'app-confirm-email',\n  templateUrl: './confirm-email.component.html',\n  styleUrls: ['./confirm-email.component.css']\n})\nexport class ConfirmEmailComponent implements OnInit {\n\n  constructor(\n    private auth: AuthService,\n    private route: ActivatedRoute\n  ) {\n\n  }\n\n  ngOnInit() {\n      this.auth.confirmEmail(this.route.snapshot.params[\"token\"])\n          .subscribe(\n              resp => console.log(resp)\n          );\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\\n<div class=\\\"auth\\\">\\n  <div class=\\\"form\\\">\\n    <form [formGroup]=\\\"resetPasswordGroup\\\" (ngSubmit)=\\\"toConfirmReset()\\\">\\n      <label>\\n        New password:\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" required>\\n      </label>\\n      <label>\\n        Confirm password:\\n        <input type=\\\"password\\\" formControlName=\\\"password_confirm\\\" required>\\n      </label>\\n      <div class=\\\"error\\\" *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n        <ul>\\n          <li *ngIf=\\\"password.errors.minlength || password.errors.maxlength\\\">Password must be from 8 to 40 characters long</li>\\n          <li *ngIf=\\\"password.errors.wrongFormat\\\">Password must contain at least one digit</li>\\n        </ul>\\n      </div>\\n    <button type=\\\"submit\\\" [disabled]=\\\"!resetPasswordGroup.valid\\\">Submit</button>\\n    </form>\\n  </div>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TextFormatDirective} from \"../directives/text-format.directive\";\nimport {AuthService} from \"../auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-confirm-reset',\n    templateUrl: './confirm-reset.component.html',\n    styleUrls: ['./confirm-reset.component.css']\n})\nexport class ConfirmResetComponent implements OnInit {\n    returnUrl : string;\n    resetPasswordGroup = new FormGroup({\n        password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n            TextFormatDirective(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/),\n        ]),\n        password_confirm: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n            TextFormatDirective(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/),\n        ] )\n    });\n\n    toConfirmReset() {\n        if (this.resetPasswordGroup.controls['password'].value ===\n            this.resetPasswordGroup.controls['password_confirm'].value) {\n                this.auth_.toResetPasswordConfirm(\n                    this.route.snapshot.params[\"token\"],\n                    this.resetPasswordGroup.controls['password'].value\n                ).subscribe(res => this.router.navigate([this.returnUrl]))\n            }\n    }\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n        this.returnUrl = '/login';\n    }\n\n}\n","import {AbstractControl, ValidatorFn} from \"@angular/forms\";\n\n\nexport function TextFormatDirective(nameRe: RegExp): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} | null => {\n        const correct = nameRe.test(control.value);\n        return correct ? null : {'wrongFormat': {value: control.value}} ;\n    };\n}","module.exports = \"\"","module.exports = \"<p>\\n  TODO: home page which is accessible if user is logged in\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"\\n<div class=\\\"auth\\\">\\n  <div class=\\\"form\\\">\\n    <form [formGroup]=\\\"loginGroup\\\" (ngSubmit)=\\\"toLogin()\\\">\\n      <label>\\n        Email:\\n        <input type=\\\"text\\\" formControlName=\\\"email\\\" required>\\n      </label>\\n      <label>\\n        Password:\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" required>\\n      </label>\\n      <div class=\\\"error\\\" *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n        <ul>\\n          <li *ngIf=\\\"password.errors.minlength || password.errors.maxlength\\\">Password must be from 8 to 40 characters long</li>\\n          <li *ngIf=\\\"password.errors.wrongFormat\\\">Password must contain at least one digit</li>\\n        </ul>\\n      </div>\\n    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!registerGroup.valid\\\">Submit</button>\\n    </form>\\n  </div>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../auth.service\";\nimport {User} from \"../models/user\";\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n    returnUrl: string;\n\n    loginGroup = new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n\n        ]),\n        password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n        ])\n    });\n\n    toLogin() {\n        this.auth_.toLogin(new User(this.loginGroup.controls['email'].value,\n            this.loginGroup.controls['password'].value))\n            .subscribe(\n                res => {\n                    this.router.navigate([this.returnUrl]);\n                },\n            )\n    }\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n}\n","module.exports = \"\"","module.exports = \"\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {User} from \"../models/user\";\n\n@Component({\n    selector: 'app-logout',\n    templateUrl: './logout.component.html',\n    styleUrls: ['./logout.component.css']\n})\nexport class LogoutComponent implements OnInit {\n    returnUrl: string = '/login';\n    name: string;\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n        this.auth_.toLogout(null).subscribe()\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\n    }\n\n}\n","export class User {\n    email: string;\n    password: string;\n\n    constructor(email, pass: string) {\n        this.email = email;\n        this.password = pass;\n    }\n\n\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  TODO: Custom error 404 page\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.css']\n})\nexport class NotfoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".ng-valid[required], .ng-valid.required  {\\n    border-radius: 5px;\\n  width: 80%;\\n  background-color: rgba(240, 210, 200, 0.14);\\n  padding-top: 7px;\\n  padding-bottom: 7px;\\n  margin-top: 3px;\\n  border-bottom: 1px solid #42A948; /* green */\\n}\\n\\n.ng-invalid:not(form)  {\\n  border-radius: 5px;\\n    background-color: rgba(240, 210, 200, 0.14);\\n  width: 80%;\\n  padding-top: 7px;\\n  padding-bottom: 7px;\\n    margin-top: 3px;\\n  margin-bottom: 3px;\\n\\n  border-bottom: 2px solid #a94442; /* red */\\n}\\n\\nbutton {\\n  margin-top: 15px;\\n}\\n\\n.form {\\n  padding-left: 20px;\\n  padding-top: 40px;\\n}\\n\\n.auth {\\n  position: absolute;\\n    top:0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n    margin: auto;\\n  height: 340px;\\n  width: 400px;\\n  background-color: rgba(200, 190, 120, 0.2);\\n  border-radius: 5px;\\n  border: 2px solid rgba(170, 150, 80, 0.2);\\n}\\n\\nlabel, input {\\n  display: block;\\n}\\n\"","module.exports = \"\\n<div class=\\\"auth\\\">\\n  <div class=\\\"form\\\">\\n    <form [formGroup]=\\\"registerGroup\\\" (ngSubmit)=\\\"toRegister()\\\">\\n      <label>\\n        Email:\\n        <input type=\\\"text\\\" formControlName=\\\"email\\\" required>\\n      </label>\\n      <div class=\\\"error\\\" *ngIf=\\\"isEmailBusy == true\\\">Email is taken</div>\\n      <label>\\n        Password:\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" required>\\n      </label>\\n      <div class=\\\"error\\\" *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n        <ul>\\n          <li *ngIf=\\\"password.errors.minlength || password.errors.maxlength\\\">Password must be from 8 to 40 characters long</li>\\n          <li *ngIf=\\\"password.errors.wrongFormat\\\">Password must contain at least one digit</li>\\n        </ul>\\n      </div>\\n    <button type=\\\"submit\\\" [disabled]=\\\"!registerGroup.valid\\\">Submit</button>\\n    </form>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TextFormatDirective} from \"../directives/text-format.directive\";\nimport {AuthService} from \"../auth.service\";\n\nimport {User} from \"../models/user\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n\n  returnUrl : string;\n  isEmailBusy : boolean = false;\n\n  registerGroup =  new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            TextFormatDirective(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/)\n\n        ]),\n        password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n            TextFormatDirective(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/),\n        ])\n      });\n\n    toRegister() {\n        this.auth_.toRegister(new User(this.registerGroup.controls['email'].value,\n            this.registerGroup.controls['password'].value))\n            .subscribe(\n            res => {\n                localStorage.setItem('token', res.token);\n                this.router.navigate([this.returnUrl]);\n            },\n            error => {\n                this.isEmailBusy = true;\n            })\n    }\n\n    get password() { return this.registerGroup.get('password')}\n\n\n    constructor(\n        private auth_ : AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) { }\n\n    ngOnInit() {\n\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n}\n","module.exports = \".form{\\n    text-align: center;\\n}\"","module.exports = \"\\n<div class=\\\"auth\\\">\\n    <div class=\\\"form\\\">\\n        <form id=\\\"reset-password\\\" [formGroup]=\\\"resetPasswordGroup\\\" (ngSubmit)=\\\"toResetPassword()\\\">\\n            <label >\\n                Email:\\n                <input type=\\\"text\\\" formControlName=\\\"email\\\" required>\\n            </label>\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!resetPasswordGroup.valid\\\">Submit</button>\\n        </form>\\n    </div>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../auth.service\";\n\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n\n@Component({\n    selector: 'app-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n\n    resetPasswordGroup = new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n\n        ])\n    });\n\n    changeText(id, text_to_change) {\n        let elem = document.getElementById(id);\n        elem.textContent = text_to_change;\n    }\n\n    toResetPassword() {\n        this.auth_.toResetPassword(this.resetPasswordGroup.controls['email'].value)\n            .subscribe(\n                res => {\n                    this.changeText(\"reset-password\", \"<h1>Please check your email</h1>\")\n                },\n            )\n    }\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));"],"sourceRoot":""}